 -- 5a
 SELECT * FROM STUDENT;

-- 5b
SELECT FIRST_NAME, LAST_NAME, CITY FROM STUDENT ORDER BY LAST_NAME DESC;

-- 5c
SELECT ID, FIRST_NAME, LAST_NAME FROM STUDENT WHERE COURSE_ID = 5;
SELECT * FROM STUDENT WHERE COURSE_ID = 5;
SELECT * FROM STUDENT WHERE LAST_NAME LIKE 'T%';
SELECT * FROM STUDENT WHERE LAST_NAME LIKE '%IS';
SELECT CITY FROM STUDENT WHERE CITY != 'New Jennifer';
SELECT TITLE, FIRST_NAME, LAST_NAME
      FROM TUTOR WHERE BIRTHDAY BETWEEN TO_DATE('1-1-1950', 'DD-MM-YYYY')
                                    AND TO_DATE('31-12-1980', 'DD-MM-YYYY');

-- Cities with more than 1 students
SELECT CITY FROM STUDENT GROUP BY CITY HAVING COUNT(CITY)>1;

-- 5d
---- 2 tables
SELECT STUDENT.ID, STUDENT.LAST_NAME, LOAN.ID, LOAN.LOAN_DATE
      FROM STUDENT JOIN LOAN ON LOAN.STUDENT_ID = STUDENT.ID
      WHERE LOAN.LOAN_DATE > TO_DATE('1-1-2007', 'DD-MM-YYYY'); -- LOANS FROM STUDENTS FROM 2007
---- 3 tables
SELECT COURSE.COURSE_NAME FROM COURSE INNER JOIN STUDENT ON STUDENT.COURSE_ID = COURSE.ID
                                      INNER JOIN LOAN ON LOAN.STUDENT_ID = STUDENT.ID
    WHERE LOAN.LOAN_DATE > TO_DATE('1-1-2007', 'DD-MM-YYYY');
---- More tables, with groupby
SELECT SCHOOL.SCHOOL_NAME, COUNT(*) FROM SCHOOl JOIN COURSE ON COURSE.SCHOOL_ID = SCHOOL.ID
                                      JOIN STUDENT ON STUDENT.COURSE_ID = COURSE.ID
                                      JOIN LOAN ON LOAN.STUDENT_ID = STUDENT.ID
    WHERE LOAN.LOAN_DATE > TO_DATE('1-1-2007', 'DD-MM-YYYY')
    GROUP BY SCHOOL.SCHOOL_NAME
    ORDER BY COUNT(*) DESC; -- Select how many per-school loans where made by students, with books borrowed after 2007

-- 5e
----1
SELECT * FROM (SELECT COURSE.COURSE_NAME, COUNT(STUDENT.ID) COUNTS
              FROM STUDENT JOIN COURSE ON COURSE.ID = STUDENT.COURSE_ID GROUP BY
              COURSE.COURSE_NAME ORDER BY COUNTS DESC) WHERE rownum between 1 and 1;

---- 2
SELECT COURSE.COURSE_NAME, COUNT(STUDENT.ID) COUNTS
              FROM STUDENT JOIN COURSE ON COURSE.ID = STUDENT.COURSE_ID GROUP BY
              COURSE.COURSE_NAME ORDER BY COUNTS;

---- 3
SELECT COPY_ID FROM LOAN WHERE LOAN_DATE BETWEEN TO_DATE('1-1-2018', 'DD-MM-YYYY')
                              AND TO_DATE('31-12-2018', 'DD-MM-YYYY');
---- We used 2006 as the date because there are no data for loans after 2010 according to our data
SELECT COPY_ID FROM LOAN WHERE LOAN_DATE BETWEEN TO_DATE('1-1-2006', 'DD-MM-YYYY')
                              AND TO_DATE('31-12-2006', 'DD-MM-YYYY');

---- 4
SELECT COUNT(COPY_ID) FROM LOAN WHERE LOAN_DATE BETWEEN TO_DATE('1-1-2006', 'DD-MM-YYYY')
                              AND TO_DATE('31-12-2006', 'DD-MM-YYYY');

---- 5
SELECT COPY_ID FROM LOAN WHERE LOAN_DATE LIKE '__-OCT-____'; -- Tricky way ;)

---- 6
-- we removed duplicate names 'cuz it made sense
SELECT UNIQUE(BOOK.TITLE) FROM LOAN
      JOIN COPY ON LOAN.COPY_ID = COPY.ID
      JOIN BOOK ON BOOK.ISBN = COPY.ISBN
  WHERE LOAN.LOAN_DATE LIKE '__-OCT-____';

---- 7
SELECT STUDENT.LAST_NAME, AVG(STUDENT_ASSESSMENT.GRADE)  FROM STUDENT
    JOIN STUDENT_ASSESSMENT ON STUDENT.ID = STUDENT_ASSESSMENT.STUDENT_ID
    GROUP BY STUDENT.LAST_NAME ORDER BY AVG(STUDENT_ASSESSMENT.GRADE) DESC;

---- 8
SELECT STUDENT.LAST_NAME FROM STUDENT
    JOIN STUDENT_ASSESSMENT ON STUDENT.ID = STUDENT_ASSESSMENT.STUDENT_ID
    WHERE STUDENT_ASSESSMENT.EXAM IS NULL;

---- 9
SELECT TUTOR.LAST_NAME, COUNT(*) FROM TUTOR
      JOIN TUTOR_C_MODULE ON TUTOR.ID = TUTOR_C_MODULE.TUTOR_ID
      GROUP BY TUTOR.LAST_NAME;

---- 10
SELECT ASSESSMENT.ID, AVG((STUDENT_ASSESSMENT.GRADE+STUDENT_ASSESSMENT.EXAM)/2) FROM MODULE
      JOIN COURSE_MODULE ON MODULE.ID = COURSE_MODULE.MODULE_ID
      JOIN ASSESSMENT ON ASSESSMENT.COURSE_MODULE_ID = COURSE_MODULE.ID
      JOIN STUDENT_ASSESSMENT ON ASSESSMENT.ID = STUDENT_ASSESSMENT.ASSESSMENT_ID
      GROUP BY ASSESSMENT.ID;


-- BONUS
---- 1
SELECT * FROM (SELECT COURSE.COURSE_NAME, COUNT(*) FROM COURSE
                            JOIN STUDENT ON STUDENT.COURSE_ID = COURSE.ID
                            JOIN LOAN ON LOAN.STUDENT_ID = STUDENT.ID
    WHERE LOAN.LOAN_DATE > TO_DATE('1-1-2007', 'DD-MM-YYYY')
    GROUP BY COURSE.COURSE_NAME
    ORDER BY COUNT(*) DESC) WHERE rownum between 1 and 1; -- tricky way, limit 1 does not work in Oracle :@

---- 2
-- Course 5 is Computing, we just know.
SELECT BOOK.AUTHOR, COUNT(LOAN.ID) FROM LOAN
              JOIN COPY ON COPY.ID = LOAN.COPY_ID
              JOIN BOOK ON BOOK.ISBN = COPY.ISBN
              JOIN STUDENT ON STUDENT.ID = LOAN.STUDENT_ID
              JOIN COURSE ON STUDENT.COURSE_ID = COURSE.ID
              WHERE COURSE.COURSE_NAME = 'Course 5'
              GROUP BY BOOK.AUTHOR;

---- 3
SELECT CONCAT(SUBSTR(FIRST_NAME, 0, 2), SUBSTR(LAST_NAME, 0, 5)) USERNAME FROM STUDENT;

---- 4
-- Just stick to the outcome.
-- We take number of loans by each category and
-- then divide by the population in each group respectively
-- It looks like the tutors like books more than the students :O
SELECT 'STUDENT_RATIO' ' ', ((SELECT COUNT(*) FROM LOAN
                                    WHERE STUDENT_ID IS NOT NULL)
                                / (SELECT COUNT(*) FROM STUDENT)) AVG_LOAN_RATIO FROM dual
UNION
SELECT 'TUTOR_RATIO', ((SELECT COUNT(*) FROM LOAN
                            WHERE STUDENT_ID IS NULL)
                       / (SELECT COUNT(*) FROM TUTOR)) from dual;

---- 5
-- We consider reverse to be DESC
SELECT MODULE.MODULE_NAME, COUNT(STUDENT.ID) FROM MODULE
                        JOIN COURSE_MODULE ON MODULE.ID = COURSE_MODULE.MODULE_ID
                        JOIN COURSE ON COURSE.ID = COURSE_MODULE.COURSE_ID
                        JOIN STUDENT ON STUDENT.COURSE_ID = COURSE.ID
                        GROUP BY MODULE.MODULE_NAME
                        ORDER BY COUNT(STUDENT.ID) DESC;

---- 6
SELECT * FROM (SELECT COURSE.COURSE_NAME, AVG((STUDENT_ASSESSMENT.GRADE + STUDENT_ASSESSMENT.EXAM)/2) COURSE_AVG
        FROM COURSE JOIN COURSE_MODULE ON COURSE.ID = COURSE_MODULE.COURSE_ID
        JOIN ASSESSMENT ON ASSESSMENT.COURSE_MODULE_ID = COURSE_MODULE.ID
        JOIN STUDENT_ASSESSMENT ON STUDENT_ASSESSMENT.ASSESSMENT_ID = ASSESSMENT.ID
        GROUP BY COURSE.COURSE_NAME
        ORDER BY AVG((STUDENT_ASSESSMENT.GRADE + STUDENT_ASSESSMENT.EXAM)/2) DESC)
        WHERE rownum between 1 and 1;
